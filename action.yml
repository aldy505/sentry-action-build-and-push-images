name: 'Build and Push Container Images'
description: 'Builds images on PRs and builds/pushes to registries on default branch'

inputs:
  # Image configuration
  image_name:
    description: 'Base image name (e.g., myorg/myapp)'
    required: true

  dockerfile_path:
    description: 'Path to Dockerfile'
    required: false
    default: './Dockerfile'

  build_context:
    description: 'Build context directory'
    required: false
    default: '.'

  build_target:
    description: 'Docker build target stage'
    required: false
    default: ''

  build_args:
    description: 'Docker build arguments (multiline)'
    required: false
    default: ''

  # Registry configuration
  ghcr:
    description: 'Enable GitHub Container Registry'
    required: false
    default: 'true'

  ghcr_image_name:
    description: 'GHCR image name (defaults to ghcr.io/{owner}/{image_name})'
    required: false
    default: ''

  publish_on_pr:
    description: 'Publish images on pull requests (SHA tags only)'
    required: false
    default: 'false'

  google_ar:
    description: 'Enable Google Artifact Registry'
    required: false
    default: 'false'

  google_ar_image_name:
    description: 'Google Artifact Registry image name'
    required: false
    default: ''

  google_ar_tag_prefix:
    description: 'Google Artifact Registry latest tag'
    required: false
    default: ''

  google_workload_identity_provider:
    description: 'Google Workload Identity Provider'
    required: false
    default: ''

  google_service_account:
    description: 'Google Service Account'
    required: false
    default: ''

  # Build configuration
  platform:
    description: 'platform to build (e.g., amd64, arm64)'
    required: false
    default: 'amd64'

runs:
  using: 'composite'
  steps:
    - name: Setup build metadata
      id: setup
      shell: bash
      run: |
        # Setup image names
        GHCR_IMAGE_NAME="${{ inputs.ghcr_image_name }}"
        if [[ -z "$GHCR_IMAGE_NAME" ]]; then
          GHCR_IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}"
        fi
        echo "ghcr_image_name=$GHCR_IMAGE_NAME" >> $GITHUB_OUTPUT

        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "platform: ${{ inputs.platform }}"
        if [[ "${{ inputs.google_ar }}" == "true" ]]; then
          if [[ -z "${{ inputs.google_ar_image_name }}" ]]; then
            echo "Error: Google Artifact Registry image name is required when publishing to Google Artifact Registry is enabled"
            exit 1
          fi
          echo "GAR Image: ${{ inputs.google_ar_image_name }}"
        fi
        if [[ "${{ inputs.ghcr }}" == "true" ]]; then
          echo "GHCR Image: $GHCR_IMAGE_NAME"
        fi

        # Determine publishing conditions
        PUBLISH_TO_GHCR="false"
        PUBLISH_TO_GAR="false"

        # GHCR: Publish on default branch push OR PR (if enabled)
        if [[ "${{ inputs.ghcr }}" == "true" && (("${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}") || ("${{ github.event_name }}" == "pull_request" && "${{ inputs.publish_on_pr }}" == "true")) ]]; then
          PUBLISH_TO_GHCR="true"
        fi

        # GAR: Publish on default branch push only
        if [[ "${{ inputs.google_ar }}" == "true" && "${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]]; then
          PUBLISH_TO_GAR="true"
        fi

        echo "publish_to_ghcr=$PUBLISH_TO_GHCR" >> $GITHUB_OUTPUT
        echo "publish_to_gar=$PUBLISH_TO_GAR" >> $GITHUB_OUTPUT
        echo "Publishing to GHCR: $PUBLISH_TO_GHCR"
        echo "Publishing to GAR: $PUBLISH_TO_GAR"


    - name: Extract metadata for GHCR
      id: meta-ghcr
      if: steps.setup.outputs.publish_to_ghcr == 'true'
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      with:
        images: ${{ steps.setup.outputs.ghcr_image_name }}
        tags: |
          # SHA for all events
          type=sha,format=short
          # Long SHA for all events
          type=sha,format=long
          # Nightly tags only for default branch pushes
          type=raw,value=nightly,enable={{is_default_branch}}
        labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.vendor="Sentry"
            org.opencontainers.image.revision=${{ github.pull_request.head.sha || github.sha }}
            org.opencontainers.image.version=${{ github.pull_request.head.sha || github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}

    - name: Login to GitHub Container Registry
      if: steps.setup.outputs.publish_to_ghcr == 'true'
      shell: bash
      run: |
        docker login ghcr.io -u "${{ github.actor }}" --password "${{ github.token }}"

    - name: Build and push to GHCR
      id: build-and-push-to-ghcr
      if: steps.setup.outputs.publish_to_ghcr == 'true'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile_path }}
        platforms: linux/${{ inputs.platform }}
        build-args: ${{ inputs.build_args }}
        target: ${{ inputs.build_target }}
        tags: ${{ steps.meta-ghcr.outputs.tags }}
        labels: ${{ steps.meta-ghcr.outputs.labels }}
        cache-from: type=gha,scope=${{ inputs.platform }}
        cache-to: type=gha,mode=max,scope=${{ inputs.platform }}
        provenance: mode=max
        sbom: true
        push: true

    - name: Extract metadata for GAR
      id: meta-gar
      if: steps.setup.outputs.publish_to_gar == 'true'
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      with:
        images: ${{ inputs.google_ar_image_name }}
        tags: |
          # SHA for all events
          type=sha,format=short
          # Long SHA for all events
          type=sha,format=long
        labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.vendor="Sentry"
            org.opencontainers.image.revision=${{ github.pull_request.head.sha || github.sha }}
            org.opencontainers.image.version=${{ github.pull_request.head.sha || github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}


    - name: Setup Google Cloud authentication
      if: steps.setup.outputs.publish_to_gar == 'true'
      uses: google-github-actions/auth@ba79af03959ebeac9769e648f473a284504d9193 # v2.1.10
      with:
        workload_identity_provider: ${{ inputs.google_workload_identity_provider }}
        service_account: ${{ inputs.google_service_account }}

    - name: Configure Docker for Google Artifact Registry
      if: steps.setup.outputs.publish_to_gar == 'true'
      shell: bash
      run: |
        gcloud auth configure-docker $(echo "${{ inputs.google_ar_image_name }}" | cut -d'/' -f1)

    - name: Build and push to GAR
      if: steps.setup.outputs.publish_to_gar == 'true'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile_path }}
        platforms: linux/${{ inputs.platform }}
        build-args: ${{ inputs.build_args }}
        target: ${{ inputs.build_target }}
        tags: ${{ steps.meta-gar.outputs.tags }}
        labels: ${{ steps.meta-gar.outputs.labels }}
        cache-from: type=gha,scope=${{ inputs.platform }}
        cache-to: type=gha,mode=max,scope=${{ inputs.platform }}
        provenance: mode=max
        sbom: true
        push: true

    - name: Build only (no push)
      id: build-only
      if: steps.setup.outputs.publish_to_ghcr == 'false' && steps.setup.outputs.publish_to_gar == 'false'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile_path }}
        platforms: linux/${{ inputs.platform }}
        build-args: ${{ inputs.build_args }}
        target: ${{ inputs.build_target }}
        tags: build-${{ inputs.image_name }}:${{ github.pull_request.head.sha || github.sha }}
        cache-from: type=gha,scope=${{ inputs.platform }}
        cache-to: type=gha,mode=max,scope=${{ inputs.platform }}
        provenance: mode=max
        sbom: true
        push: false
